{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/SignupForm.js","components/LoginForm.js","components/NavBar.js","utils/queries.js","utils/helpers.js","pages/Search.js","utils/Cities.js","utils/API.js","components/BannerCard.js","components/BannerIntro.js","pages/Home.js","utils/localStorage.js","components/Table.js","pages/Profile.js","assets/images/city.jpg","components/Footer.js","App.js","index.js"],"names":["LOGIN_USER","gql","SAVE_HOME_CITY","ADD_USER","SAVE_CITY","REMOVE_CITY","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","SignupForm","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","addUser","error","useEffect","handleInputChange","event","target","name","value","handleFormSubmit","a","console","log","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","className","disabled","LoginForm","Fragment","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Container","fluid","Brand","as","Link","to","icon","faHome","Toggle","Collapse","id","Nav","loggedIn","onClick","logout","Modal","size","onHide","Tab","defaultActiveKey","Header","closeButton","Title","Body","Item","eventKey","Content","Pane","handleModalClose","QUERY_ME","numbersWithCommas","num","toString","replace","Search","useQuery","loading","searchedCities","setSearchedCities","searchInput","setSearchInput","savedCityIds","setSavedCityIds","me","savedCities","cityIds","map","cityId","saveHomeCity","saveHomeError","saveCity","SuggestionsList","props","suggestions","onSelectSuggestion","displaySuggestions","selectedSuggestion","onKeyDown","length","suggestion","index","classname","tabIndex","faExclamationTriangle","React","filteredSuggestions","setFilteredSuggestions","setSelectedSuggestion","setDisplaySuggestions","fetch","response","ok","Error","json","cityList","cityData","_embedded","pop","population","uaScores","categories","housing","Math","round","score_out_of_10","costOfLiving","safety","healthcare","education","environmentalQuality","economy","taxation","geoname_id","regionLink","_links","href","getImageResponse","regionImage","imageLink","photos","image","web","regionName","full_name","homeCityEqualsCurrent","homeCity","city","matching_full_name","handleSaveHomeCity","cityToSave","find","region","parseInt","btn","document","getElementById","innerHTML","setAttribute","handleSaveCity","Jumbotron","style","width","Row","filter","toLowerCase","includes","onBlur","alert","light","faSearch","Grid","stackable","columns","Column","primary","undefined","src","alt","labels","datasets","label","backgroundColor","borderColor","borderWidth","height","options","maintainAspectRatio","scales","y","suggestedMin","suggestedMax","bannerCard","headerIcon","title","text","Card","margin","textAlign","Text","BannerIntro","bannerCards","faChartBar","faCity","i","BannerCard","Home","removeCityId","JSON","parse","updatedSavedCityIds","savedCityId","stringify","CityTable","cityValue","setCityValue","userData","Dropdown","e","multiple","selection","key","_id","cityInfo","city1","getCityById","Table","responsive","striped","bordered","hover","city2","item","Profile","fetchPolicy","removeCity","handleDeleteCity","Col","sm","md","Meta","Description","split","extra","Icon","Image","wrapped","ui","cityCount","transition","Fade","Footer","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","NavBar","exact","path","component","render","ReactDOM"],"mappings":"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","file":"static/js/main.8e9e6f7d.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\n// define mutaion for login\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n      }\n    }\n  }\n`;\n\n\n\n\n\n\nexport const SAVE_HOME_CITY = gql`\n    mutation saveHomeCity($homeCity: cityInput!) {\n        saveHomeCity(homeCity: $homeCity) {\n            username\n            homeCity{\n              name\n              region\n              population\n            }\n            savedCities{\n              name\n            }\n            } \n    }\n  \n`\n\n\n// define mutation for adding a user\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n      }\n    }\n  }\n`;\n\n// define mutation for saving a city\nexport const SAVE_CITY = gql`\n  mutation saveCity($city: cityInput) {\n    saveCity(city: $city) {\n      _id\n      username\n      savedCities {\n        cityId\n        name\n        image\n        healthcare\n        taxation\n        education\n        housing\n        costOfLiving\n        safety\n        environmentalQuality\n        economy\n        population\n        region\n      }\n    }\n  }\n`;\n\n// define mutation for removing a city\nexport const REMOVE_CITY = gql`\n  mutation removeCity($cityId: ID!) {\n    removeCity(cityId: $cityId) {\n       _id\n      username\n      savedCities {\n        cityId\n        name\n        image\n        healthcare\n        taxation\n        education\n        housing\n        costOfLiving\n        safety\n        environmentalQuality\n        economy\n        population\n        region\n      }\n    }\n  }\n`;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    console.log(userFormData);\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          className=\"mt-10\"\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit} className='p-3'>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Error: Login credentials are incorrect.\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Enter your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Error: Email is required.</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Enter your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Error: Password is required.</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          className=\"mt-10\" disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n\n      </Form>\n    </React.Fragment>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Image } from 'semantic-ui-react'\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\nimport Auth from '../utils/auth';\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport src from '../assets/images/logo192.png';\n\nconst AppNavbar = () => {\n    // set modal display state\n    const [showModal, setShowModal] = useState(false);\n\n    return (\n        <React.Fragment>\n            <Navbar className='navi p-4' bg='dark' variant='dark' expand='lg'>\n                <Container fluid>\n                    <Navbar.Brand as={Link} to='/'>\n                        <span className=\"mx-5 h2\">\n                             <FontAwesomeIcon className=\"home-logo\" icon={faHome} />\n                            {/* <Image className=\"logo-image\" src={src} verticalAlign=\"top\" size=\"tiny\" /> */}\n                            Home City\n                        </span>\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls='navbar' />\n                    <Navbar.Collapse id='navbar'>\n                        <Nav className='ml-auto'>\n                            <Nav.Link as={Link} to='/'>\n                                Search Cities\n                            </Nav.Link>\n                            {/* if user is logged in show saved books and logout */}\n                            {Auth.loggedIn() ? (\n                                <>\n                                    <Nav.Link as={Link} to='/profile'>\n                                        See Your Cities\n                                    </Nav.Link>\n                                    <Nav.Link onClick={Auth.logout} as={Link} to='/' >Logout</Nav.Link>\n                                </>\n                            ) : (\n                                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n                            )}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n            {/* set modal data up */}\n            <Modal\n                size='lg'\n                show={showModal}\n                onHide={() => setShowModal(false)}\n                aria-labelledby='signup-modal'>\n                {/* tab container to do either signup or login component */}\n                <Tab.Container defaultActiveKey='login'>\n                    <Modal.Header closeButton>\n                        <Modal.Title id='signup-modal'>\n                            Login\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Nav variant='pills' className=\"mb-4\">\n                            <Nav.Item>\n                                <Nav.Link eventKey='login' className=\"btn-link\">Login</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey='signup' className=\"btn-link\">Sign Up</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                        <Tab.Content>\n                            <Tab.Pane eventKey='login'>\n                                <LoginForm handleModalClose={() => setShowModal(false)} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey='signup'>\n                                <SignUpForm handleModalClose={() => setShowModal(false)} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Modal.Body>\n                </Tab.Container>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport default AppNavbar;\n","import { gql } from '@apollo/client';\n\n// define query\nexport const QUERY_ME = gql`\n  query me {\n    me {\n      _id\n      username\n      email\n      cityCount\n      homeCity{\n        cityId\n        name\n        image\n        healthcare\n        taxation\n        education\n        housing\n        costOfLiving\n        safety\n        environmentalQuality\n        economy\n        population\n        region\n      }\n      savedCities {\n        _id\n        cityId\n        name\n        image\n        healthcare\n        taxation\n        education\n        housing\n        costOfLiving\n        safety\n        environmentalQuality\n        economy\n        population\n        region\n      }\n    }\n  }\n`;","export const numbersWithCommas = (num) => {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}","import React, { useState, useEffect } from 'react';\nimport { searchCityData, searchBlank } from '../utils/API';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { SAVE_CITY, SAVE_HOME_CITY } from '../utils/mutations';\nimport { QUERY_ME } from '../utils/queries';\nimport { numbersWithCommas } from '../utils/helpers'\nimport { Jumbotron, Form } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { Bar } from 'react-chartjs-2';\nimport { faSearch, faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { Container, Button, Grid } from 'semantic-ui-react';\nimport AutoSearch from '../components/AutoSearch';\nimport CityNames from '../utils/Cities';\n\n\n\n\n\nconst Search = () => {\n  const { loading, error, data } = useQuery(QUERY_ME, {});\n  console.log(error);\n  console.log(data);\n  const [searchedCities, setSearchedCities] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  const [savedCityIds, setSavedCityIds] = useState([]);\n\n  // set up useEffect hook to save `savedCityIds` list to localStorage on component unmount\n  useEffect(() => {\n    if (!loading && data?.me?.savedCities) {\n      const cityIds = data.me.savedCities.map(({ cityId }) => cityId)\n      //console.log(\"saved city ids from db --- \", cityIds)\n      setSavedCityIds(cityIds)\n    }\n  }, [loading]);\n\n  // set mutation for saving City\n\n\n  const [saveHomeCity, { saveHomeError }] = useMutation(SAVE_HOME_CITY);\n\n  const [saveCity] = useMutation(SAVE_CITY\n  );\n\n  const SuggestionsList = props => {\n    const {\n      suggestions,\n      searchInput,\n      onSelectSuggestion,\n      displaySuggestions,\n      selectedSuggestion,\n      onKeyDown\n\n    } = props;\n\n    if (searchInput && displaySuggestions) {\n      if (suggestions.length > 0) {\n        return (\n\n          <ul className=\"suggestions-list\">\n            {suggestions.map((suggestion, index) => {\n              const isSelected = selectedSuggestion === index;\n              const classname = `suggestion ${isSelected ? \"selected\" : \"\"}`;\n\n              return (\n                <li\n                  tabIndex={0}\n                  key={index}\n                  className={classname}\n                  onClick={() => onSelectSuggestion(index)}\n                  onKeyDown={onKeyDown}\n\n                >\n                  {suggestion}\n                </li>\n\n              );\n            })}\n          </ul>\n        );\n      } else {\n        return <div className=\"no-suggestions\"> <FontAwesomeIcon icon={faExclamationTriangle} />&nbsp;&nbsp;No suggestions are available</div>;\n      }\n    }\n    return <></>;\n  };\n\n\n  const [filteredSuggestions, setFilteredSuggestions] = React.useState([]);\n  const [selectedSuggestion, setSelectedSuggestion] = React.useState(0);\n  const [displaySuggestions, setDisplaySuggestions] = React.useState(false);\n\n\n  const suggestions = CityNames();\n\n  const onChange = event => {\n    const value = event.target.value;\n    setSearchInput(value);\n\n    const filteredSuggestions = suggestions.filter(suggestion =>\n      suggestion.toLowerCase().includes(value.toLowerCase())\n    );\n\n    setFilteredSuggestions(filteredSuggestions);\n    setDisplaySuggestions(true);\n\n  };\n\n  const onSelectSuggestion = index => {\n    setSelectedSuggestion(index);\n    setSearchInput(filteredSuggestions[index]);\n    setFilteredSuggestions([]);\n    setDisplaySuggestions(false);\n\n\n  };\n\n\n\n\n\n  // create method to search for city and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      // perform API call to teleport\n      const response = await searchCityData(searchInput);\n      //console.log(response);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      // get returned data store to variable to pass into the useState hook\n      const cityList = await response.json();\n      const cityData = cityList._embedded['city:search-results'];\n\n      // storing the population data as it also lives in an embedded directory\n      const pop = cityData[0]._embedded[\"city:item\"].population;\n      cityData[0]['population'] = numbersWithCommas(pop);\n\n      // store the category data into an array\n      const uaScores = cityData[0]._embedded[\"city:item\"]._embedded[\"city:urban_area\"]._embedded[\"ua:scores\"].categories;\n      cityData[0].housing = Math.round(uaScores[0].score_out_of_10);\n      cityData[0].costOfLiving = Math.round(uaScores[1].score_out_of_10);\n      cityData[0].safety = Math.round(uaScores[7].score_out_of_10);\n      cityData[0].healthcare = Math.round(uaScores[8].score_out_of_10);\n      cityData[0].education = Math.round(uaScores[9].score_out_of_10);\n      cityData[0].environmentalQuality = Math.round(uaScores[10].score_out_of_10);\n      cityData[0].economy = Math.round(uaScores[11].score_out_of_10);\n      cityData[0].taxation = Math.round(uaScores[12].score_out_of_10);\n      cityData[0].cityId = cityData[0]._embedded[\"city:item\"].geoname_id;\n      // store the link for the image in a variable \n      const regionLink = cityData[0]._embedded[\"city:item\"]._embedded[\"city:urban_area\"]._links[\"ua:images\"].href;\n      // API call to retrieve the image link\n      const getImageResponse = await searchBlank(regionLink);\n      if (!getImageResponse.ok) {\n        throw new Error('something went wrong!');\n      }\n      const regionImage = await getImageResponse.json();\n      // get the image link and store the string value in the cityData object \n      const imageLink = regionImage.photos[0].image.web;\n      cityData[0]['image'] = imageLink;\n\n\n      const regionName = cityData[0]._embedded[\"city:item\"]._embedded[\"city:urban_area\"].full_name;\n      cityData[0]['region'] = regionName;\n\n      // Update the hook and empty the search field\n      setSearchedCities(cityData);\n      // setSearchedChart(cityData);\n      setSearchInput('');\n\n\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const homeCityEqualsCurrent = (homeCity, city) => {\n    //checks if current search result is saved as the users home city\n    if (homeCity === null) {\n      return false;\n    }\n    else {\n      //console.log('home city', homeCity);\n      //console.log('city',city);\n      if (homeCity.name === city.matching_full_name) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  const handleSaveHomeCity = async (cityId) => {\n    const cityToSave = searchedCities.find((city) => city.cityId === cityId);\n    //console.log('setting as home city', cityToSave);\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    if (!token) {\n      return false;\n    }\n    try {\n      const cityData = {\n        cityId: cityToSave._embedded[\"city:item\"].geoname_id,\n        name: cityToSave.matching_full_name,\n        healthcare: cityToSave.healthcare,\n        taxation: cityToSave.taxation,\n        education: cityToSave.education,\n        costOfLiving: cityToSave.costOfLiving,\n        housing: cityToSave.housing,\n        safety: cityToSave.safety,\n        environmentalQuality: cityToSave.environmentalQuality,\n        economy: cityToSave.economy,\n        image: cityToSave.image,\n        region: cityToSave.region,\n        population: parseInt(cityToSave.population.replace(/,/g, ''), 10)\n      }\n      console.log(cityData);\n      const response = await saveHomeCity({\n        variables: { homeCity: cityData },\n      });\n      console.log('save home error', saveHomeError);\n      if (!response.data) {\n        throw new Error('something went wrong!');\n      }\n      const btn = document.getElementById('saveHomeCityBtn')\n      btn.innerHTML = 'City is your Home City';\n      btn.setAttribute('disabled', true);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const handleSaveCity = async (cityId) => {\n\n    // find the city in `searchedcities` state by the matching id\n    const cityToSave = searchedCities.find((city) => city.cityId === cityId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    // save city\n    try {\n      console.log(cityToSave);\n      const cityData = {\n        cityId: cityToSave._embedded[\"city:item\"].geoname_id,\n        name: cityToSave.matching_full_name,\n        healthcare: cityToSave.healthcare,\n        taxation: cityToSave.taxation,\n        education: cityToSave.education,\n        costOfLiving: cityToSave.costOfLiving,\n        housing: cityToSave.housing,\n        safety: cityToSave.safety,\n        environmentalQuality: cityToSave.environmentalQuality,\n        economy: cityToSave.economy,\n        image: cityToSave.image,\n        region: cityToSave.region,\n\n        //change population(which has commas) into an integer\n        population: parseInt(cityToSave.population.replace(/,/g, ''), 10)\n\n\n\n\n\n\n      }\n\n      const response = await saveCity({\n        variables: { city: cityData },\n      });\n      console.log(saveCity);\n\n\n      if (!response.data) {\n        throw new Error('something went wrong!');\n      }\n\n      setSavedCityIds([...savedCityIds, cityData.cityId]);\n      const btn = document.getElementById('saveCityBtn')\n      btn.innerHTML = 'This city has already been saved!';\n      btn.setAttribute('disabled', true);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n\n  return (\n    <>\n\n      <Jumbotron fluid className='text-light jumboGrad home-search'>\n\n\n        <Container\n          // onClick={() => setDisplaySuggestions(false)}\n          style={{ width: '70rem' }} className='p-5 jumbo'>\n\n          <Form className='p-5' onSubmit={handleFormSubmit}>\n            <h1 className=\"text-center font-normal\">Search for your future <span className=\"home-city\">home city</span></h1>\n\n            <Form.Row >\n              <Form.Label className=\"text-left display-block\">City, State </Form.Label>\n              <div className=\"input-group\">\n                <Form.Control\n\n                  size=\"lg\"\n                  className=\"user-input form-control-large\"\n                  type=\"text\"\n                  onChange={onChange}\n                  value={searchInput}\n                  placeholder='Enter city name'\n                />\n                <SuggestionsList\n                  onBlur={() => (alert(\"blur\"), setDisplaySuggestions(false))}\n\n                  searchInput={searchInput}\n                  selectedSuggestion={selectedSuggestion}\n                  onSelectSuggestion={onSelectSuggestion}\n                  displaySuggestions={displaySuggestions}\n                  suggestions={filteredSuggestions}\n                />\n\n\n                <Button light type='submit'>\n                  <FontAwesomeIcon icon={faSearch} /><span>&nbsp;&nbsp;Search</span>\n                </Button>\n              </div>\n            </Form.Row></Form>\n        </Container>\n\n      </Jumbotron>\n\n\n      <Container className='p-5'>\n        {searchedCities.map(city => {\n          console.log(city);\n          return <div key={city.matching_full_name}>\n            <Grid stackable columns={2}>\n              <Grid.Column>\n                <div >\n                  <h2>\n                    City: {city.matching_full_name}\n                  </h2>\n\n                  {\n                    Auth.loggedIn() &&\n                    <Button primary\n                      disabled={savedCityIds.includes(city.cityId + '') || savedCityIds.includes(city.cityId)}\n                      className='btn-block btn-info'\n                      id=\"saveCityBtn\"\n                      onClick={() => handleSaveCity(city.cityId)}>\n                      {savedCityIds.includes(city.cityId + '') || savedCityIds.includes(city.cityId)\n                        ? 'City has been saved'\n                        : 'Save this City'}\n                    </Button>\n\n\n                  }\n\n                  {\n                    (Auth.loggedIn() && !loading && error === undefined) &&\n                    <Button disabled={homeCityEqualsCurrent(data.me.homeCity, city)}\n                      id=\"saveHomeCityBtn\"\n                      primary onClick={() => handleSaveHomeCity(city.cityId)}>\n                      {homeCityEqualsCurrent(data.me.homeCity, city)\n                        ? 'City is your Home City'\n                        : 'Set as Home City'\n                      }\n                    </Button>\n\n                  }\n                  <h3>\n                    <span className=\"bold\">Population: </span><span>{city.population}</span>\n                  </h3>\n                  <div>\n                    <span className=\"bold\">Region: </span><span>{city.region}</span>\n                  </div>\n                  <div>\n                    <span className=\"bold\">Healthcare: </span><span>{city.healthcare} of 10</span>\n                  </div>\n                  <div>\n                    <span className=\"bold\">Taxation: </span><span>{city.taxation} of 10</span>\n                  </div>\n                  <div>\n                    <span className=\"bold\">Education: </span><span>{city.education} of 10</span>\n                  </div>\n                  <div>\n                    <span className=\"bold\">Housing: </span><span>{city.housing} of 10</span>\n                  </div>\n                  <div>\n                    <span className=\"bold\">Cost of Living: </span><span>{city.costOfLiving} of 10</span>\n                  </div>\n                  <div>\n                    <span className=\"bold\">Safety: </span><span>{city.safety} of 10</span>\n                  </div>\n                  <div>\n                    <span className=\"bold\">Environmental Quality: </span><span>{city.environmentalQuality} of 10</span>\n                  </div>\n                  <div>\n                    <span className=\"bold\">Economy: </span><span>{city.economy} of 10</span>\n                  </div>\n                </div>\n              </Grid.Column>\n              <Grid.Column className=\"image-cropper\">\n                <img src={city.image} className=\"city-pic\" alt=\"img not found\"></img>\n\n\n\n              </Grid.Column>\n            </Grid>\n\n\n            <Container>\n              <div>\n                <Bar\n                  data={{\n                    labels: ['Healthcare', 'Taxation', 'Education', 'Housing', 'Living', 'Safety', 'Environment', 'Economy'],\n                    datasets: [\n                      {\n                        label: 'Score',\n                        data: [`${city.healthcare}`, `${city.taxation}`, `${city.education}`, `${city.housing}`, `${city.costOfLiving}`, `${city.safety}`, `${city.environmentalQuality}`, `${city.economy}`],\n\n                        backgroundColor: [\n                          'rgba(255, 99, 132, 0.2)',\n                          'rgba(54, 162, 235, 0.2)',\n                          'rgba(255, 206, 86, 0.2)',\n                          'rgba(75, 192, 192, 0.2)',\n                          'rgba(153, 102, 255, 0.2)',\n                          'rgba(255, 159, 64, 0.2)'\n                        ],\n                        borderColor: [\n                          'rgba(255, 99, 132, 1)',\n                          'rgba(54, 162, 235, 1)',\n                          'rgba(255, 206, 86, 1)',\n                          'rgba(75, 192, 192, 1)',\n                          'rgba(153, 102, 255, 1)',\n                          'rgba(255, 159, 64, 1)'\n                        ],\n                        borderWidth: 1\n                      }]\n\n                  }}\n                  height={400}\n                  width={500}\n                  options={{\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        suggestedMin: 0,\n                        suggestedMax: 10\n                      }\n                    }\n                  }}\n                />\n              </div>\n\n\n            </Container>\n          </div>\n        })}\n\n      </Container>\n\n\n    </>\n  );\n};\n\nexport default Search;\n","export default function CityNames() {\n    return [\n        \"New York, New York\",\n        \"Los Angeles, California\",\n        \"Chicago, Illinois\",\n        \"Houston, Texas\",\n        \"Phoenix, Arizona\",\n        \"Philadelphia, Pennsylvania\",\n        \"San Antonio, Texas\",\n        \"San Diego, California\",\n        \"Dallas, Texas\",\n        \"San Jose, California\",\n        \"Austin, Texas\",\n        \"Jacksonville, Florida\",\n        \"Fort Worth, Texas\",\n        \"Columbus, Ohio\",\n        \"Charlotte, North Carolina\",\n        \"San Francisco, California\",\n        \"Indianapolis, Indiana\",\n        \"Seattle, Washington\",\n        \"Denver, Colorado\",\n        \"Washington, DC\",\n        \"Boston, Massachusetts\",\n        \"El Paso, Texas\",\n        \"Nashville-Davidson, Tennessee\",\n        \"Detroit, Michigan\",\n        \"Oklahoma City, Oklahoma\",\n        \"Portland, Oregon\",\n        \"Las Vegas, Nevada\",\n        \"Memphis, Tennessee\",\n        \"Louisville-Jefferson County, Kentucky\",\n        \"Baltimore, Maryland\",\n        \"Milwaukee, Wisconsin\",\n        \"Albuquerque, N.M.\",\n        \"Tucson, Arizona\",\n        \"Fresno, California\",\n        \"Mesa, Arizona\",\n        \"Sacramento, California\",\n        \"Atlanta, Georgia\",\n        \"Kansas City, Missouri\",\n        \"Colorado Springs, Colorado\",\n        \"Omaha, Nebraska\",\n        \"Raleigh, North Carolina\",\n        \"Miami, Florida\",\n        \"Long Beach, California\",\n        \"Virginia Beach, Virginia\",\n        \"Oakland, California\",\n        \"Minneapolis, Minnesota\",\n        \"Tulsa, Oklahoma\",\n        \"Tampa, Florida\",\n        \"Arlington, Texas\",\n        \"New Orleans, Louisiana\",\n\n    ]\n}","export const searchCityData = (query) => {\n  return fetch(`https://api.teleport.org/api/cities/?search=${query}&limit=1&embed=city%3Asearch-results%2Fcity%3Aitem%2Fcity%3Aurban_area%2Fua%3Ascores`);\n};\n\nexport const searchBlank = (link) => {\n  return fetch(`${link}`);\n};","import Card from \"react-bootstrap/Card\"\n\nconst bannerCard = ({ headerIcon, title, text}) => {\n    return (\n        <Card bg=\"light\" text=\"dark\" style={{ width: '18rem', margin: '10px', textAlign: \"center\" }}>\n            <Card.Header>\n                {headerIcon}\n                <Card.Title>{title}</Card.Title>\n            </Card.Header>\n            <Card.Body>\n                <Card.Text>{text}</Card.Text>\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default bannerCard;","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChartBar, faCity, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport BannerCard from \"./BannerCard\";\nconst BannerIntro = () => {\n  let bannerCards = [\n    {\n      headerIcon: <FontAwesomeIcon icon={faSearch} />,\n      title: \"Search\",\n      text: \"Search for U.S. cities to find population statistics and quality of life scores.\"\n    },\n    {\n      headerIcon: <FontAwesomeIcon icon={faChartBar} />,\n      title: \"Analyze\",\n      text: \"Get healthcare, taxation, education, housing, cost of living, safety, environmental quality & economy scores.\"\n\n    },\n    {\n      headerIcon: <FontAwesomeIcon icon={faCity} />,\n      title: \"Compare\",\n      text: \"See how your home city compares with your possible future home cities.\"\n\n    }\n  ];\n    return (\n        <div className=\"row my-5 justify-content-between p-5\">\n          {bannerCards.map((bannerCard, i) => <BannerCard key={i} {...bannerCard} />)}\n        </div>\n    )\n}\n\nexport default BannerIntro;","import Search from \"./Search\"\nimport BannerIntro from \"../components/BannerIntro\"\n\nconst Home = () => {\n    return (\n        <>\n            <Search />\n            <BannerIntro />\n        </>\n    )\n}\n\nexport default Home;","export const getSavedCityIds = () => {\n  const savedCityIds = localStorage.getItem('saved_cities')\n    ? JSON.parse(localStorage.getItem('saved_cities'))\n    : [];\n\n  return savedCityIds;\n};\n\nexport const saveCityIds = (cityIdArr) => {\n  if (cityIdArr.length) {\n    localStorage.setItem('saved_cities', JSON.stringify(cityIdArr));\n  } else {\n    localStorage.removeItem('saved_cities');\n  }\n};\n\nexport const removeCityId = (cityId) => {\n  const savedCityIds = localStorage.getItem('saved_cities')\n    ? JSON.parse(localStorage.getItem('saved_cities'))\n    : null;\n\n  if (!savedCityIds) {\n    return false;\n  }\n\n  const updatedSavedCityIds = savedCityIds?.filter((savedCityId) => savedCityId !== cityId);\n  localStorage.setItem('saved_cities', JSON.stringify(updatedSavedCityIds));\n\n  return true;\n};\n","import React from 'react';\nimport { Container, Table } from 'react-bootstrap';\nimport { Dropdown } from 'semantic-ui-react';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { numbersWithCommas } from '../utils/helpers'\n\nconst CityTable = () => {\n\n    const [cityValue, setCityValue] = useState([]);\n\n    const handleChange = (e, { value }) => {\n        setCityValue(value);\n    }\n\n    const { loading, data } = useQuery(QUERY_ME);\n    const userData = data?.me || [];\n    // if data isn't here yet, say so\n    if (loading) {\n        return <h2>LOADING...</h2>;\n    }\n\n    return (\n\n        <Container>\n\n            <h3>\n                {userData.savedCities?.length > 1\n                    ? `Select 2 cities to compare. You have ${userData.savedCities.length} ${userData.savedCities.length === 1 ? 'city' : 'cities'} saved.`\n                    : 'You need at least 2 saved cities to compare. Search for more cities'}\n            </h3>\n\n            <Dropdown className=\"mb-10\" placeholder='Saved City' onChange={handleChange} fluid multiple selection options={\n                userData.savedCities?.map((city) => {\n                    return {\n                        key: city._id,\n                        value: city._id,\n                        text: city.name,\n                        disabled: cityValue.length > 1 ? true : false\n                    }\n                })\n            } />\n\n            {cityValue?.map((cityInfo, index) => {\n                if (cityValue.length === 1) {\n                    const city1 = getCityById(cityValue[0]);\n\n                    city1.population = numbersWithCommas(city1[0].population);\n                    city1.healthcare = Math.round(city1[0].healthcare);\n                    city1.taxation = Math.round(city1[0].taxation);\n                    city1.education = Math.round(city1[0].education);\n                    city1.housing = Math.round(city1[0].housing);\n                    city1.costOfLiving = Math.round(city1[0].costOfLiving);\n                    city1.safety = Math.round(city1[0].safety);\n                    city1.environmentalQuality = Math.round(city1[0].environmentalQuality);\n                    city1.economy = Math.round(city1[0].economy);\n\n                    return (\n                        <Table responsive key={city1[0]._id} striped bordered hover>\n                            <thead>\n                                <tr>\n                                    <th>City</th>\n                                    <th>{city1[0].name}</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>Population</td>\n                                    <td>{city1.population}</td>\n                                </tr>\n                                <tr>\n                                    <td>Healthcare</td>\n                                    <td>{city1.healthcare}</td>\n                                </tr>\n                                <tr>\n                                    <td>Taxation</td>\n                                    <td>{city1.taxation}</td>\n                                </tr>\n                                <tr>\n                                    <td>Education</td>\n                                    <td>{city1.education}</td>\n                                </tr>\n                                <tr>\n                                    <td>Housing</td>\n                                    <td>{city1.housing}</td>\n                                </tr>\n                                <tr>\n                                    <td>Living</td>\n                                    <td>{city1.costOfLiving}</td>\n                                </tr>\n                                <tr>\n                                    <td>Safety</td>\n                                    <td>{city1.safety}</td>\n                                </tr>\n                                <tr>\n                                    <td>Environment</td>\n                                    <td>{city1.environmentalQuality}</td>\n                                </tr>\n                                <tr>\n                                    <td>Economy</td>\n                                    <td>{city1.economy}</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                    )\n\n                } else if (cityValue.length === 2) {\n                    const city1 = getCityById(cityValue[0]);\n                    const city2 = getCityById(cityValue[1]);\n\n                    city1.population = numbersWithCommas(city1[0].population);\n                    city2.population = numbersWithCommas(city2[0].population);\n\n                    city1.population = numbersWithCommas(city1[0].population);\n                    city1.healthcare = Math.round(city1[0].healthcare);\n                    city1.taxation = Math.round(city1[0].taxation);\n                    city1.education = Math.round(city1[0].education);\n                    city1.housing = Math.round(city1[0].housing);\n                    city1.costOfLiving = Math.round(city1[0].costOfLiving);\n                    city1.safety = Math.round(city1[0].safety);\n                    city1.environmentalQuality = Math.round(city1[0].environmentalQuality);\n                    city1.economy = Math.round(city1[0].economy);\n\n                    city2.population = numbersWithCommas(city2[0].population);\n                    city2.healthcare = Math.round(city2[0].healthcare);\n                    city2.taxation = Math.round(city2[0].taxation);\n                    city2.education = Math.round(city2[0].education);\n                    city2.housing = Math.round(city2[0].housing);\n                    city2.costOfLiving = Math.round(city2[0].costOfLiving);\n                    city2.safety = Math.round(city2[0].safety);\n                    city2.environmentalQuality = Math.round(city2[0].environmentalQuality);\n                    city2.economy = Math.round(city2[0].economy);\n                    if (index === 1) {\n                        return (\n                            <Table responsive key={city1[0]._id} striped bordered hover >\n                                <thead>\n                                    <tr>\n                                        <th>City</th>\n                                        <th>{city1[0].name}</th>\n                                        <th>{city2[0].name}</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>Population</td>\n                                        <td>{city1.population}</td>\n                                        <td>{city2.population}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Healthcare</td>\n                                        <td>{city1.healthcare}</td>\n                                        <td>{city2.healthcare}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Taxation</td>\n                                        <td>{city1.taxation}</td>\n                                        <td>{city2.taxation}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Education</td>\n                                        <td>{city1.education}</td>\n                                        <td>{city2.education}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Housing</td>\n                                        <td>{city1.housing}</td>\n                                        <td>{city2.housing}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Living</td>\n                                        <td>{city1.costOfLiving}</td>\n                                        <td>{city2.costOfLiving}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Safety</td>\n                                        <td>{city1.safety}</td>\n                                        <td>{city2.safety}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Environment</td>\n                                        <td>{city1.environmentalQuality}</td>\n                                        <td>{city2.environmentalQuality}</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Economy</td>\n                                        <td>{city1.economy}</td>\n                                        <td>{city2.economy}</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                        )\n                    }\n\n                } else {\n                    return;\n                }\n\n                function getCityById(cityInfo) {\n                    return (userData.savedCities?.filter(item => {\n                        return item._id === cityInfo;\n                    }))\n                };\n\n            })}\n\n        </Container>\n\n    )\n}\n\n\nexport default CityTable","import React from 'react';\nimport { Jumbotron, Container, Button, Col, Row, ListGroup, Nav, Tab, Fade } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_CITY } from '../utils/mutations';\nimport { removeCityId } from '../utils/localStorage';\nimport Auth from '../utils/auth';\nimport { Bar } from 'react-chartjs-2'\nimport CityTable from '../components/Table';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Card, Icon, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\nimport { numbersWithCommas } from '../utils/helpers'\nimport city from \"../assets/images/city.jpg\";\n\n\n\n\nconst Profile = () => {\n\n\n  const { loading, data } = useQuery(QUERY_ME, { fetchPolicy: 'network-only' });\n  console.log(data);\n  const [removeCity] = useMutation(REMOVE_CITY);\n\n  const userData = data?.me || {};\n  console.log(userData);\n\n  if (!userData?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this. Use the navigation links above to\n        sign up or log in!\n      </h4>\n    );\n  }\n\n\n\n  // create function that accepts the city's mongo _id value as param and deletes the book from the database\n  const handleDeleteCity = async (cityId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    // remove city\n    try {\n      const response = await removeCity({\n        variables: { cityId },\n      });\n\n      if (!response.data) {\n        throw new Error('something went wrong!');\n      }\n      // upon success, remove city's id from localStorage\n      removeCityId(cityId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n\n      <Jumbotron fluid className=\"m-3\">\n        <Row>\n\n          <Col className=\"mb-2 mt-3 about-me\" sm={12} md={5}>\n            <Container>\n              <Card fluid>\n                <Card.Content className=\"text-left\">\n                  <Card.Header><h1>{data.me.username}</h1></Card.Header>\n                  <Card.Meta>{data.me.email}</Card.Meta>\n                  <Card.Description>\n                    {data.me.homeCity &&\n                      <h3>{data.me.username} is currently living in {data.me.homeCity.name.split(',')[0]}.</h3>}\n\n                  </Card.Description>\n\n                </Card.Content>\n                <Card.Content extra>\n                  <div className=\"display-flex align-center \">\n                    <Icon disabled name='building' size='large' />\n                    <span>{data.me.savedCities.length} saved cities</span>\n                  </div>\n                </Card.Content>\n                {\n                  data.me.homeCity &&\n                  <Card.Content extra>\n                    <div className=\"display-flex align-center \">\n                      <Icon disabled name='home' size='large' />\n                      <span>{data.me.homeCity.name}</span>\n                    </div>\n                  </Card.Content>\n                }\n\n              </Card>\n              {\n                data.me.homeCity\n                  ? <Card fluid>\n                    <Image src={data.me.homeCity.image} wrapped ui={false} />\n                    <Card.Content>\n                      <Card.Header>{data.me.homeCity.name.split(',')[0]}</Card.Header>\n                      <Card.Meta>{data.me.homeCity.name}</Card.Meta>\n                      <Card.Description>\n                        Population: {numbersWithCommas(data.me.homeCity.population)}\n                      </Card.Description>\n                    </Card.Content>\n\n                  </Card>\n                  : <Link to=\"/\"><Button variant=\"danger\">Search for your home city</Button></Link>\n              }\n\n            </Container>\n\n          </Col>\n          <Col sm={12} md={7} className=\"mt-3\">\n            <Container className=\"scores\">\n              <h2> City Compare</h2>\n              <CityTable />\n            </Container>\n            <Container className=\"data\"> <h2> Your {userData.cityCount} Saved Cities!</h2> </Container>\n\n            <Container className=\"scores\">\n              <Tab.Container className=\"\" sm={12} id=\"left-tabs-example\" >\n                <Row >\n                  <Col sm={12}>\n                    <Tab.Content>\n                      {userData.savedCities.map((city) => {\n                        return (\n                          <Tab.Pane eventKey={city.cityId} transition={Fade}>\n                            <Row className=\"CityChartName\">\n                              <h3> Viewing {city.name}\n                                <Button variant=\"outline-danger delete\" size=\"sm\" onClick={() => handleDeleteCity(city.cityId)}>\n                                  Delete city\n                                </Button></h3>\n\n                            </Row>\n                            {<Bar className=\"mb-3\"\n                              data={{\n                                labels: ['Healthcare', 'Taxation', 'Education', 'Housing', 'Living', 'Safety', 'Environment', 'Economy'],\n                                datasets: [\n                                  {\n                                    label: 'Score',\n                                    data: [`${city.healthcare}`, `${city.taxation}`, `${city.education}`, `${city.housing}`, `${city.costOfLiving}`, `${city.safety}`, `${city.environmentalQuality}`, `${city.economy}`],\n\n                                    backgroundColor: [\n                                      'rgba(255, 99, 132, 0.2)',\n                                      'rgba(54, 162, 235, 0.2)',\n                                      'rgba(255, 206, 86, 0.2)',\n                                      'rgba(75, 192, 192, 0.2)',\n                                      'rgba(153, 102, 255, 0.2)',\n                                      'rgba(255, 159, 64, 0.2)'\n                                    ],\n                                    borderColor: [\n                                      'rgba(255, 99, 132, 1)',\n                                      'rgba(54, 162, 235, 1)',\n                                      'rgba(255, 206, 86, 1)',\n                                      'rgba(75, 192, 192, 1)',\n                                      'rgba(153, 102, 255, 1)',\n                                      'rgba(255, 159, 64, 1)'\n                                    ],\n                                    borderWidth: 1\n                                  }]\n                              }}\n                              height={60}\n                              width={200}\n                              options={{\n                                responsive: true,\n                                maintainAspectRatio: true,\n                                scales: {\n                                  y: {\n                                    suggestedMin: 0,\n                                    suggestedMax: 5\n                                  }\n                                }\n                              }}\n                            />}\n\n                          </Tab.Pane>)\n                      })}\n                    </Tab.Content>\n\n                  </Col>\n                  <Col sm={12} className=\"display-flex flex-wrap\">\n                    {userData.savedCities.map((city) => {\n                      return (\n                        <Nav key={city.cityId} defaultActiveKey={city.cityId} variant=\"pills\"  >\n                          <Nav.Item >\n                            <Nav.Link className=\"p-2 pb-2\" eventKey={city.cityId}> {city.name}</Nav.Link>\n                          </Nav.Item>\n                        </Nav>)\n                    })}\n                  </Col>\n\n                </Row>\n              </Tab.Container>\n\n            </Container>\n\n          </Col>\n\n        </Row>\n      </Jumbotron>\n    </>\n  );\n};\n\nexport default Profile;","export default __webpack_public_path__ + \"static/media/city.603d5ecc.jpg\";","const Footer = () => {\n    return <footer>&copy; 2021 Home City</footer>\n}\n\nexport default Footer;","import React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n\nimport NavBar from './components/NavBar';\nimport Home from './pages/Home';\nimport Profile from './pages/Profile';\nimport Footer from './components/Footer';\n\n// create main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// create request middleware\nconst authLink = setContext((_, { headers }) => {\n\n  // get the token from local storage \n  const token = localStorage.getItem('id_token');\n\n  // return the headers to the context\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\n// create Apollo client\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <NavBar />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route exact path='/profile' component={Profile} />\n\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n          <Footer />\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\n// import * as serviceWorker from '../misc/serviceWorkerRegistration';\n\n\nReactDOM.render(\n\n  <App />,\n\n  document.getElementById('root')\n);\n\n// serviceWorker.register();"],"sourceRoot":""}