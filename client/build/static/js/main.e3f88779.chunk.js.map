{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/SignupForm.js","components/LoginForm.js","components/NavBar.js","pages/Search.js","utils/localStorage.js","utils/API.js","utils/helpers.js","utils/queries.js","components/BarChart.js","components/Table.js","pages/Profile.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_CITY","REMOVE_CITY","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","reload","SignupForm","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","addUser","error","useEffect","handleInputChange","event","target","name","value","handleFormSubmit","a","console","log","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","LoginForm","Fragment","className","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Container","fluid","Brand","as","Link","to","Toggle","Collapse","id","Nav","loggedIn","onClick","logout","Modal","size","onHide","Tab","defaultActiveKey","Header","closeButton","Title","Body","Item","eventKey","Content","Pane","handleModalClose","Search","searchedCities","setSearchedCities","setSearchedChart","searchInput","setSearchInput","JSON","parse","savedCityIds","setSavedCityIds","cityIdArr","length","stringify","saveCity","fetch","response","ok","Error","json","cityList","cityData","_embedded","pop","population","toString","replace","uaScores","categories","housing","Math","round","score_out_of_10","costOfLiving","safety","healthcare","education","environmentalQuality","economy","taxation","regionLink","_links","href","getImageResponse","regionImage","imageLink","photos","image","web","regionName","full_name","handleSaveCity","cityId","cityToSave","find","city","matching_full_name","region","Jumbotron","Row","e","map","alt","src","labels","datasets","label","backgroundColor","borderColor","borderWidth","height","width","options","maintainAspectRatio","scales","y","suggestedMin","suggestedMax","some","savedCityId","QUERY_ME","BarChart","cityTable","Col","Dropdown","multiple","search","selection","Table","striped","bordered","hover","Profile","useQuery","loading","userData","me","xs","Card","Subtitle","Text","ListGroup","style","Img","ImgOverlay","sm","md","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","NavBar","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"gZAGaA,EAAaC,YAAH,oOAgCVC,GAdiBD,YAAH,sOAcHA,YAAH,kRAcRE,EAAYF,YAAH,uZAyBTG,EAAcH,YAAH,4Z,yBClCT,M,0FApCb,WACE,OAAOI,YAAOC,KAAKC,c,sBAGrB,WACE,IAAMC,EAAQF,KAAKC,WACnB,SAAOC,GAAUF,KAAKG,eAAeD,M,4BAGvC,SAAeA,GAIb,OAFgBH,YAAOG,GAEXE,IAAMC,KAAKC,MAAQ,MAC7BC,aAAaC,WAAW,aACjB,K,sBAMX,WACE,OAAOD,aAAaE,QAAQ,c,mBAG9B,SAAMC,GACJH,aAAaI,QAAQ,WAAYD,GACjCE,OAAOC,SAASC,OAAO,O,oBAGzB,WACEP,aAAaC,WAAW,YACxBI,OAAOC,SAASE,a,aCmFLC,EA/GI,WAGjB,MAAwCC,mBAAS,CAAEC,SAAU,GAAIC,MAAO,GAAIC,SAAU,KAAtF,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,EAAoBL,oBAAS,GAAtBM,EAAP,oBAEA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA6BC,YAAY9B,GAAzC,mBAAO+B,EAAP,KAAkBC,EAAlB,KAAkBA,MAElBC,qBAAU,WAENJ,IADEG,KAKH,CAACA,IAEJ,IAAME,EAAoB,SAACC,GACzB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdZ,EAAgB,2BAAKD,GAAN,kBAAqBY,EAAOC,MAGvCC,EAAgB,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,6DACvBC,QAAQC,IAAIjB,GACZU,EAAMQ,kBAIuB,IADhBR,EAAMS,cACVC,kBACPV,EAAMQ,iBACNR,EAAMW,mBARe,kBAYEf,EAAQ,CAC7BgB,UAAU,eAAMtB,KAbG,gBAYbuB,EAZa,EAYbA,KAIRC,EAAKC,MAAMF,EAAKjB,QAAQzB,OAhBH,kDAmBrBmC,QAAQT,MAAR,MACAH,GAAa,GApBQ,QAuBvBH,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KA1BW,0DAAH,sDA8BtB,OACE,mCAEE,eAAC2B,EAAA,EAAD,CAAMC,YAAU,EAACzB,UAAWA,EAAW0B,SAAUd,EAAjD,UAEE,cAACe,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAM3B,GAAa,IAAQ4B,KAAM7B,EAAW8B,QAAQ,SAAhF,oDAIA,eAACP,EAAA,EAAKQ,MAAN,WACE,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,OACLC,YAAY,gBACZ3B,KAAK,WACL4B,SAAU/B,EACVI,MAAOb,EAAaH,SACpB4C,UAAQ,IAEV,cAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,UAA5B,sCAGF,eAACZ,EAAA,EAAKQ,MAAN,WACE,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,QAApB,mBACA,cAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,QACLC,YAAY,qBACZ3B,KAAK,QACL4B,SAAU/B,EACVI,MAAOb,EAAaF,MACpB2C,UAAQ,IAEV,cAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,UAA5B,mCAGF,eAACZ,EAAA,EAAKQ,MAAN,WACE,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,WACLC,YAAY,gBACZ3B,KAAK,WACL4B,SAAU/B,EACVI,MAAOb,EAAaD,SACpB0C,UAAQ,IAEV,cAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,UAA5B,sCAEF,cAACK,EAAA,EAAD,CACEC,WAAY5C,EAAaH,UAAYG,EAAaF,OAASE,EAAaD,UACxEuC,KAAK,SACLL,QAAQ,UAHV,0BCXOY,EA1FG,WAChB,MAAwCjD,mBAAS,CAAEE,MAAO,GAAIC,SAAU,KAAxE,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoBL,oBAAS,GAAtBM,EAAP,oBACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA2BC,YAAYhC,GAAvC,mBAAOoD,EAAP,KAAgBlB,EAAhB,KAAgBA,MAEhBC,qBAAU,WAENJ,IADEG,KAKH,CAACA,IAEJ,IAAME,EAAoB,SAACC,GACzB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdZ,EAAgB,2BAAKD,GAAN,kBAAqBY,EAAOC,MAGvCC,EAAgB,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,6DACvBL,EAAMQ,kBAIuB,IAFhBR,EAAMS,cAEVC,kBACPV,EAAMQ,iBACNR,EAAMW,mBAPe,kBAWEI,EAAM,CAC3BH,UAAU,eAAMtB,KAZG,gBAWbuB,EAXa,EAWbA,KAIRC,EAAKC,MAAMF,EAAKE,MAAM5C,OAfD,kDAiBrBmC,QAAQT,MAAR,MACAH,GAAa,GAlBQ,QAqBvBH,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KAxBW,0DAAH,sDA4BtB,OACE,cAAC,IAAM+C,SAAP,UACE,eAACpB,EAAA,EAAD,CAAMC,YAAU,EAACzB,UAAWA,EAAW0B,SAAUd,EAAkBiC,UAAU,MAA7E,UACE,cAAClB,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAM3B,GAAa,IAAQ4B,KAAM7B,EAAW8B,QAAQ,SAAhF,qDAGA,eAACP,EAAA,EAAKQ,MAAN,WACE,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,QAApB,mBACA,cAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,OACLC,YAAY,mBACZ3B,KAAK,QACL4B,SAAU/B,EACVI,MAAOb,EAAaF,MACpB2C,UAAQ,IAEV,cAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,UAA5B,0CAGF,eAACZ,EAAA,EAAKQ,MAAN,WACE,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAACV,EAAA,EAAKW,QAAN,CACEC,KAAK,WACLC,YAAY,sBACZ3B,KAAK,WACL4B,SAAU/B,EACVI,MAAOb,EAAaD,SACpB0C,UAAQ,IAEV,cAACf,EAAA,EAAKW,QAAQK,SAAd,CAAuBJ,KAAK,UAA5B,6CAEF,cAACK,EAAA,EAAD,CACEC,WAAY5C,EAAaF,OAASE,EAAaD,UAC/CuC,KAAK,SACLL,QAAQ,UAHV,0BCROe,EArEG,WAEd,MAAkCpD,oBAAS,GAA3C,mBAAOqD,EAAP,KAAkBC,EAAlB,KAEA,OACI,eAAC,IAAMJ,SAAP,WACI,cAACK,EAAA,EAAD,CAAQJ,UAAU,WAAWK,GAAG,OAAOnB,QAAQ,OAAOoB,OAAO,KAA7D,SACI,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACJ,EAAA,EAAOK,MAAR,CAAcC,GAAIC,IAAMC,GAAG,IAA3B,4BAGA,cAACR,EAAA,EAAOS,OAAR,CAAe,gBAAc,WAC7B,cAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,SAApB,SACI,eAACC,EAAA,EAAD,CAAKhB,UAAU,UAAf,UACI,cAACgB,EAAA,EAAIL,KAAL,CAAUD,GAAIC,IAAMC,GAAG,IAAvB,2BAICnC,EAAKwC,WACF,qCACI,cAACD,EAAA,EAAIL,KAAL,CAAUD,GAAIC,IAAMC,GAAG,WAAvB,6BAGA,cAACI,EAAA,EAAIL,KAAL,CAAUO,QAASzC,EAAK0C,OAAxB,uBAGJ,cAACH,EAAA,EAAIL,KAAL,CAAUO,QAAS,kBAAMf,GAAa,IAAtC,qCAOpB,cAACiB,EAAA,EAAD,CACIC,KAAK,KACLpC,KAAMiB,EACNoB,OAAQ,kBAAMnB,GAAa,IAC3B,kBAAgB,eAJpB,SAMI,eAACoB,EAAA,EAAIhB,UAAL,CAAeiB,iBAAiB,QAAhC,UACI,cAACJ,EAAA,EAAMK,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACN,EAAA,EAAMO,MAAP,CAAaZ,GAAG,eAAhB,qBAIJ,eAACK,EAAA,EAAMQ,KAAP,WACI,eAACZ,EAAA,EAAD,CAAK9B,QAAQ,QAAQc,UAAU,OAA/B,UACI,cAACgB,EAAA,EAAIa,KAAL,UACI,cAACb,EAAA,EAAIL,KAAL,CAAUmB,SAAS,QAAQ9B,UAAU,WAArC,qBAEJ,cAACgB,EAAA,EAAIa,KAAL,UACI,cAACb,EAAA,EAAIL,KAAL,CAAUmB,SAAS,SAAS9B,UAAU,WAAtC,0BAGR,eAACuB,EAAA,EAAIQ,QAAL,WACI,cAACR,EAAA,EAAIS,KAAL,CAAUF,SAAS,QAAnB,SACI,cAAC,EAAD,CAAWG,iBAAkB,kBAAM9B,GAAa,QAEpD,cAACoB,EAAA,EAAIS,KAAL,CAAUF,SAAS,SAAnB,SACI,cAAC,EAAD,CAAYG,iBAAkB,kBAAM9B,GAAa,uB,0BC0MlE+B,EAnQA,WACb,MAA4CrF,mBAAS,IAArD,mBAAOsF,EAAP,KAAuBC,EAAvB,KACA,EAA0CvF,mBAAS,IAAnD,mBAAsBwF,GAAtB,WAEA,EAAsCxF,mBAAS,IAA/C,mBAAOyF,EAAP,KAAoBC,EAApB,KAEA,EAAwC1F,mBCfnBV,aAAaE,QAAQ,gBACtCmG,KAAKC,MAAMtG,aAAaE,QAAQ,iBAChC,IDaJ,mBAAOqG,EAAP,KAAqBC,EAArB,KAIAlF,qBAAU,WACR,OAAO,WCbgB,IAACmF,KDaCF,GCZbG,OACZ1G,aAAaI,QAAQ,eAAgBiG,KAAKM,UAAUF,IAEpDzG,aAAaC,WAAW,oBDa1B,MAAmBkB,YAAY7B,GAAxBsH,EAAP,oBAGMhF,EAAgB,uCAAG,WAAOJ,GAAP,iCAAAK,EAAA,yDACvBL,EAAMQ,iBAEDmE,EAHkB,0CAId,GAJc,gCE3BlBU,MAAM,+CAAD,OFoC8BV,EEpC9B,yFF2Ba,UASfW,EATe,OAUrBhF,QAAQC,IAAI+E,GAEPA,EAASC,GAZO,uBAab,IAAIC,MAAM,yBAbG,yBAiBEF,EAASG,OAjBX,eAiBfC,EAjBe,OAkBfC,EAAWD,EAASE,UAAU,uBAG9BC,EAAMF,EAAS,GAAGC,UAAU,aAAaE,WAC/CH,EAAS,GAAT,WAA+CE,EGjDtCE,WAAWC,QAAQ,wBAAyB,KHoD/CC,EAAWN,EAAS,GAAGC,UAAU,aAAaA,UAAU,mBAAmBA,UAAU,aAAaM,WACxGP,EAAS,GAAGQ,QAAUC,KAAKC,MAAMJ,EAAS,GAAGK,iBAC7CX,EAAS,GAAGY,aAAeH,KAAKC,MAAMJ,EAAS,GAAGK,iBAClDX,EAAS,GAAGa,OAASJ,KAAKC,MAAMJ,EAAS,GAAGK,iBAC5CX,EAAS,GAAGc,WAAaL,KAAKC,MAAMJ,EAAS,GAAGK,iBAChDX,EAAS,GAAGe,UAAYN,KAAKC,MAAMJ,EAAS,GAAGK,iBAC/CX,EAAS,GAAGgB,qBAAuBP,KAAKC,MAAMJ,EAAS,IAAIK,iBAC3DX,EAAS,GAAGiB,QAAUR,KAAKC,MAAMJ,EAAS,IAAIK,iBAC9CX,EAAS,GAAGkB,SAAWT,KAAKC,MAAMJ,EAAS,IAAIK,iBAE/ChG,QAAQC,IAAI0F,GAINa,EAAanB,EAAS,GAAGC,UAAU,aAAaA,UAAU,mBAAmBmB,OAAO,aAAaC,KAvClF,UEvBlB3B,MAAM,GAAD,OFgEmCyB,IAzCtB,YAyCfG,EAzCe,QA0CC1B,GA1CD,uBA2Cb,IAAIC,MAAM,yBA3CG,yBA6CKyB,EAAiBxB,OA7CtB,QA6CfyB,EA7Ce,OA+CfC,EAAYD,EAAYE,OAAO,GAAGC,MAAMC,IAC9C3B,EAAS,GAAT,MAAwBwB,EAElBI,EAAa5B,EAAS,GAAGC,UAAU,aAAaA,UAAU,mBAAmB4B,UACnF7B,EAAS,GAAT,OAAyB4B,EAGzB9C,EAAkBkB,GAClBjB,EAAiBiB,GACjBf,EAAe,IAxDM,kDA4DrBtE,QAAQT,MAAR,MA5DqB,0DAAH,sDAiEhB4H,EAAc,uCAAG,WAAOC,GAAP,mBAAArH,EAAA,yDAGfsH,EAAanD,EAAeoD,MAAK,SAACC,GAAD,OAAUA,EAAKH,SAAWA,KAGnD5G,EAAKwC,WAAaxC,EAAK5C,WAAa,KAN7B,0CASZ,GATY,uBAcnBoC,QAAQC,IAAIoH,GAdO,GAgBjBzH,KAAMyH,EAAWG,mBACjBrB,WAAYkB,EAAWlB,WACvBI,SAAUc,EAAWd,SACrBH,UAAWiB,EAAWjB,UACtBP,QAASwB,EAAWxB,QACpBI,aAAcoB,EAAWpB,cArBR,wBAsBRoB,EAAWxB,SAtBH,uBAuBTwB,EAAWnB,QAvBF,qCAyBfmB,EAAWhB,sBAzBI,wBA0BRgB,EAAWf,SA1BH,sBA2BVe,EAAWN,OA3BD,uBA4BTM,EAAWI,QA5BF,2BA6BLJ,EAAW7B,YAdnBH,EAfa,WAmCIP,EAAS,CAC9BxE,UAAW,CAAEiH,KAAMlC,KApCF,iBAuCL9E,KAvCK,uBAwCX,IAAI2E,MAAM,yBAxCC,QA2CnBR,EAAgB,GAAD,mBAAKD,GAAL,CAAmB4C,EAAWD,UA3C1B,kDA6CnBpH,QAAQT,MAAR,MA7CmB,0DAAH,sDAmDpB,OACE,qCACE,cAACmI,EAAA,EAAD,CAAWnF,OAAK,EAACR,UAAU,gCAA3B,SACE,eAACO,EAAA,EAAD,CAAWP,UAAU,MAArB,UACE,kEACA,cAACrB,EAAA,EAAD,CAAME,SAAUd,EAAhB,SACE,eAACY,EAAA,EAAKiH,IAAN,WACE,cAACjH,EAAA,EAAKS,MAAN,2BACA,cAACT,EAAA,EAAKW,QAAN,CACEzB,KAAK,cACLC,MAAOwE,EACP7C,SAAU,SAACoG,GAAD,OAAOtD,EAAesD,EAAEjI,OAAOE,QACzCyB,KAAK,OACLC,YAAY,0BAEd,cAACI,EAAA,EAAD,CAAQL,KAAK,SAAb,8BAMR,cAACgB,EAAA,EAAD,CAAWP,UAAU,MAArB,SACGmC,EAAe2D,KAAI,SAAAN,GAAI,OAAI,gCAC3B,sBAAKxF,UAAU,iBAAf,UACC,gCACE,6BACGwF,EAAKC,qBAER,+BACE,sBAAMzF,UAAU,OAAhB,0BAA0C,+BAAOwF,EAAK/B,gBAExD,gCACE,sBAAMzD,UAAU,OAAhB,sBAAsC,+BAAOwF,EAAKE,YAEpD,gCACE,sBAAM1F,UAAU,OAAhB,0BAA0C,iCAAOwF,EAAKpB,WAAZ,eAE5C,gCACE,sBAAMpE,UAAU,OAAhB,wBAAwC,iCAAOwF,EAAKhB,SAAZ,eAE1C,gCACE,sBAAMxE,UAAU,OAAhB,yBAAyC,iCAAOwF,EAAKnB,UAAZ,eAE3C,gCACE,sBAAMrE,UAAU,OAAhB,uBAAuC,iCAAOwF,EAAK1B,QAAZ,eAEzC,gCACE,sBAAM9D,UAAU,OAAhB,8BAA8C,iCAAOwF,EAAKtB,aAAZ,eAEhD,gCACE,sBAAMlE,UAAU,OAAhB,sBAAsC,iCAAOwF,EAAKrB,OAAZ,eAExC,gCACE,sBAAMnE,UAAU,OAAhB,qCAAqD,iCAAOwF,EAAKlB,qBAAZ,eAEvD,gCACE,sBAAMtE,UAAU,OAAhB,uBAAuC,iCAAOwF,EAAKjB,QAAZ,kBAG3C,qBAAKvE,UAAU,gBAAf,SACE,qBAAK+F,IAAI,OAAO/F,UAAU,WAAWgG,IAAKR,EAAKR,aAGjD,eAACzE,EAAA,EAAD,CAAWP,UAAU,MAArB,UACE,8BACE,cAAC,IAAD,CACExB,KAAM,CACJyH,OAAQ,CAAC,aAAc,WAAY,YAAa,UAAW,SAAU,SAAU,cAAe,WAC9FC,SAAU,CACR,CACEC,MAAO,QACP3H,KAAM,CAAC,GAAD,OAAIgH,EAAKpB,YAAT,UAA0BoB,EAAKhB,UAA/B,UAA8CgB,EAAKnB,WAAnD,UAAmEmB,EAAK1B,SAAxE,UAAsF0B,EAAKtB,cAA3F,UAA8GsB,EAAKrB,QAAnH,UAAgIqB,EAAKlB,sBAArI,UAAgKkB,EAAKjB,UAE3K6B,gBAAiB,CACf,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEFC,YAAa,CACX,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEFC,YAAa,KAInBC,OAAQ,IACRC,MAAO,IACPC,QAAS,CACPC,qBAAqB,EACrBC,OAAQ,CACNC,EAAG,CACDC,aAAc,EACdC,aAAc,UAMxB,cAAClH,EAAA,EAAD,CACEC,SAAQ,OAAE6C,QAAF,IAAEA,OAAF,EAAEA,EAAcqE,MAAK,SAACC,GAAD,OAAiBA,IAAgBxB,EAAKH,UACnErF,UAAU,qBACVkB,QAAS,kBAAMkE,EAAeI,EAAKH,SAHrC,UAIe,OAAZ3C,QAAY,IAAZA,OAAA,EAAAA,EAAcqE,MAAK,SAACC,GAAD,OAAiBA,IAAgBxB,EAAKH,WACtD,oCACA,yBA1F4BG,EAAKC,6B,iDInKtCwB,GAAW1L,YAAH,uYCsDN2L,GApDE,WAEb,OACI,cAAC3G,EAAA,EAAD,CAAWP,UAAU,MAArB,SAEI,cAAC,IAAD,CACIxB,KAAM,CACFyH,OAAQ,CAAC,aAAc,WAAY,YAAa,UAAW,SAAU,SAAU,cAAe,WAC9FC,SAAU,CACN,CACIC,MAAO,QACP3H,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAElC4H,gBAAiB,CACb,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEJC,YAAa,KAIzBC,OAAQ,IACRC,MAAO,IACPC,QAAS,CACLC,qBAAqB,EACrBC,OAAQ,CACJC,EAAG,CACCC,aAAc,EACdC,aAAc,W,oBCW3BK,GApDG,WAGd,OACI,eAAC5G,EAAA,EAAD,WACI,cAACqF,EAAA,EAAD,CAAK5F,UAAU,MAAf,SAEI,cAACoH,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CACV7G,OAAK,EACL8G,UAAQ,EAER9H,YAAY,QACZ+H,QAAM,EAENC,WAAS,QAML,eAACC,GAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCACI,6BACI,gDAIR,kCACI,6BACI,wCAEJ,6BACI,yCAEJ,6BACI,+CCkHTC,GA3IC,WAGZ,MAA0BC,aAASb,IAA3Bc,EAAR,EAAQA,QAASvJ,EAAjB,EAAiBA,KACjBP,QAAQC,IAAIM,GAEZ,IAAMwJ,GAAe,OAAJxJ,QAAI,IAAJA,OAAA,EAAAA,EAAMyJ,KAAM,GAC7BhK,QAAQC,IAAI8J,GAGZ,MAAqB1K,YAAY5B,GAAjC,oBA2BA,OAAIqM,EACO,4CAIP,mCACI,cAACpC,EAAA,EAAD,CAAWnF,OAAK,EAACR,UAAU,MAA3B,SACI,eAAC4F,EAAA,EAAD,WACI,eAACwB,GAAA,EAAD,CAAKpH,UAAU,SAASkI,GAAI,EAA5B,UACI,cAACC,GAAA,EAAD,CAAMnI,UAAU,OAAhB,SAEI,eAACmI,GAAA,EAAKvG,KAAN,WACI,cAACuG,GAAA,EAAKxG,MAAN,yBACA,cAACwG,GAAA,EAAKC,SAAN,CAAepI,UAAU,kBAAzB,2BACA,cAACmI,GAAA,EAAKE,KAAN,6GAIA,cAACF,GAAA,EAAKxH,KAAN,CAAWgE,KAAK,IAAhB,uBACA,cAACwD,GAAA,EAAKxH,KAAN,CAAWgE,KAAK,IAAhB,0BACA,eAAC2D,GAAA,EAAD,CAAWpJ,QAAQ,QAAnB,UACI,cAACoJ,GAAA,EAAUzG,KAAX,8BACA,cAACyG,GAAA,EAAUzG,KAAX,sCACA,cAACyG,GAAA,EAAUzG,KAAX,yCAIZ,eAACsG,GAAA,EAAD,CAAMnI,UAAU,qBAAqBuI,MAAO,CAAEhC,OAAQ,SAAtD,UACI,cAAC4B,GAAA,EAAKK,IAAN,CAAUxC,IAAI,qBAAqBD,IAAI,eACvC,eAACoC,GAAA,EAAKM,WAAN,WACI,cAACN,GAAA,EAAKxG,MAAN,yBACA,cAACwG,GAAA,EAAKE,KAAN,+IAIA,cAACF,GAAA,EAAKE,KAAN,+CAKZ,eAACjB,GAAA,EAAD,CAAKpH,UAAU,SAAf,UACI,cAACoH,GAAA,EAAD,CAAKpH,UAAU,SAAf,SAEI,eAACO,EAAA,EAAD,WAEI,cAACgB,EAAA,EAAIhB,UAAL,CAAeQ,GAAG,oBAAoBS,iBAAiB,QAAvD,SACI,eAACoE,EAAA,EAAD,WACI,cAACwB,GAAA,EAAD,CAAKsB,GAAI,EAAT,SACI,eAAC1H,EAAA,EAAD,CAAK9B,QAAQ,QAAQc,UAAU,cAA/B,UACI,cAACgB,EAAA,EAAIa,KAAL,UACI,cAACb,EAAA,EAAIL,KAAL,CAAUX,UAAU,YAAY8B,SAAS,QAAzC,6BAEJ,cAACd,EAAA,EAAIa,KAAL,UACI,cAACb,EAAA,EAAIL,KAAL,CAAUX,UAAU,YAAY8B,SAAS,SAAzC,4BAEJ,cAACd,EAAA,EAAIa,KAAL,UACI,cAACb,EAAA,EAAIL,KAAL,CAAUX,UAAU,YAAY8B,SAAS,QAAzC,iCAIZ,cAACsF,GAAA,EAAD,CAAKsB,GAAI,EAAT,SACI,eAACnH,EAAA,EAAIQ,QAAL,WACI,cAACR,EAAA,EAAIS,KAAL,CAAUF,SAAS,QAAnB,SACI,cAAC,GAAD,MAEJ,cAACP,EAAA,EAAIS,KAAL,CAAUF,SAAS,SAAnB,SACI,cAAC,GAAD,MAEJ,cAACP,EAAA,EAAIS,KAAL,CAAUF,SAAS,QAAnB,SACI,cAAC,GAAD,gBAMpB,sDACA,cAAC,GAAD,SAOR,cAAC8D,EAAA,EAAD,CAAK5F,UAAU,MAAf,SACI,cAACoH,GAAA,EAAD,CAAKuB,IAAE,iBC7H7BC,GAAWC,YAAe,CAC9BC,IAAK,aAIDC,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAG1BpN,EAAQK,aAAaE,QAAQ,YAGnC,MAAO,CACL6M,QAAQ,2BACHA,GADE,IAELC,cAAerN,EAAK,iBAAaA,GAAU,SAM3CsN,GAAS,IAAIC,IAAa,CAC9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,MAqBEC,OAlBf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBP,OAAQA,GAAxB,SACE,cAAC,IAAD,UACE,qCACE,cAACQ,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7H,IACjC,cAAC,IAAD,CAAO2H,OAAK,EAACC,KAAK,WAAWC,UAAWlC,KAExC,cAAC,IAAD,CAAOmC,OAAQ,kBAAM,oBAAIhK,UAAU,YAAd,uCCvCjCiK,IAASD,OACP,cAAC,IAAME,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e3f88779.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\n// define mutaion for login\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n      }\n    }\n  }\n`;\n\n\n\n\n\n\nexport const SAVE_HOME_CITY = gql`\n    mutation saveHomeCity($cityInput: cityInput!) {\n        saveCity(input: $cityInput) {\n            username\n            savedCities{\n               _id\n            }\n            } \n    }\n  \n`\n\n\n// define mutation for adding a user\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n      }\n    }\n  }\n`;\n\n// define mutation for saving a city\nexport const SAVE_CITY = gql`\n  mutation saveCity($city: cityInput) {\n    saveCity(city: $city) {\n      _id\n      username\n      savedCities {\n        cityId\n        name\n        image\n        healthcare\n        taxation\n        education\n        housing\n        costOfLiving\n        safety\n        environmentalQuality\n        economy\n        population\n        region\n      }\n    }\n  }\n`;\n\n// define mutation for removing a city\nexport const REMOVE_CITY = gql`\n  mutation removeCity($cityId: ID!) {\n    removeCity(cityId: $cityId) {\n       _id\n      username\n      savedCities {\n        cityId\n        name\n        image\n        healthcare\n        taxation\n        education\n        housing\n        costOfLiving\n        safety\n        environmentalQuality\n        economy\n        population\n        region\n      }\n    }\n  }\n`;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    console.log(userFormData);\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit} className='p-3'>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Error: Login credentials are incorrect.\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Enter your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Error: Email is required.</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Enter your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Error: Password is required.</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n\n      </Form>\n    </React.Fragment>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n    // set modal display state\n    const [showModal, setShowModal] = useState(false);\n\n    return (\n        <React.Fragment>\n            <Navbar className='navi p-3' bg='dark' variant='dark' expand='lg'>\n                <Container fluid>\n                    <Navbar.Brand as={Link} to='/'>\n                        Trading Places\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls='navbar' />\n                    <Navbar.Collapse id='navbar'>\n                        <Nav className='ml-auto'>\n                            <Nav.Link as={Link} to='/'>\n                                Search Cities\n                            </Nav.Link>\n                            {/* if user is logged in show saved books and logout */}\n                            {Auth.loggedIn() ? (\n                                <>\n                                    <Nav.Link as={Link} to='/profile'>\n                                        See Your Cities\n                                    </Nav.Link>\n                                    <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                                </>\n                            ) : (\n                                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n                            )}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n            {/* set modal data up */}\n            <Modal\n                size='lg'\n                show={showModal}\n                onHide={() => setShowModal(false)}\n                aria-labelledby='signup-modal'>\n                {/* tab container to do either signup or login component */}\n                <Tab.Container defaultActiveKey='login'>\n                    <Modal.Header closeButton>\n                        <Modal.Title id='signup-modal'>\n                            Login\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Nav variant='pills' className=\"mb-4\">\n                            <Nav.Item>\n                                <Nav.Link eventKey='login' className=\"btn-link\">Login</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey='signup' className=\"btn-link\">Sign Up</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                        <Tab.Content>\n                            <Tab.Pane eventKey='login'>\n                                <LoginForm handleModalClose={() => setShowModal(false)} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey='signup'>\n                                <SignUpForm handleModalClose={() => setShowModal(false)} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Modal.Body>\n                </Tab.Container>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nexport default AppNavbar;\n","import React, { useState, useEffect } from 'react';\nimport { searchCityData, searchBlank } from '../utils/API';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_CITY } from '../utils/mutations';\nimport { numbersWithCommas } from '../utils/helpers'\nimport { saveCityIds, getSavedCityIds } from '../utils/localStorage';\nimport { Jumbotron, Container, Form, Button } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { Bar } from 'react-chartjs-2'\n\nconst Search = () => {\n  const [searchedCities, setSearchedCities] = useState([]);\n  const [searchedChart, setSearchedChart] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  const [savedCityIds, setSavedCityIds] = useState(getSavedCityIds());\n\n  // set up useEffect hook to save `savedCityIds` list to localStorage on component unmount\n\n  useEffect(() => {\n    return () => saveCityIds(savedCityIds);\n  });\n\n  // set mutation for saving City\n  const [saveCity] = useMutation(SAVE_CITY);\n\n  // create method to search for city and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      // perform API call to teleport\n      const response = await searchCityData(searchInput);\n      console.log(response);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      // get returned data store to variable to pass into the useState hook\n      const cityList = await response.json();\n      const cityData = cityList._embedded['city:search-results'];\n\n      // storing the population data as it also lives in an embedded directory\n      const pop = cityData[0]._embedded[\"city:item\"].population;\n      cityData[0].['population'] = numbersWithCommas(pop);\n\n      // store the category data into an array\n      const uaScores = cityData[0]._embedded[\"city:item\"]._embedded[\"city:urban_area\"]._embedded[\"ua:scores\"].categories;\n      cityData[0].housing = Math.round(uaScores[0].score_out_of_10);\n      cityData[0].costOfLiving = Math.round(uaScores[1].score_out_of_10);\n      cityData[0].safety = Math.round(uaScores[7].score_out_of_10);\n      cityData[0].healthcare = Math.round(uaScores[8].score_out_of_10);\n      cityData[0].education = Math.round(uaScores[9].score_out_of_10);\n      cityData[0].environmentalQuality = Math.round(uaScores[10].score_out_of_10);\n      cityData[0].economy = Math.round(uaScores[11].score_out_of_10);\n      cityData[0].taxation = Math.round(uaScores[12].score_out_of_10);\n\n      console.log(uaScores);\n\n\n      // store the link for the image in a variable \n      const regionLink = cityData[0]._embedded[\"city:item\"]._embedded[\"city:urban_area\"]._links[\"ua:images\"].href;\n      // API call to retrieve the image link\n      const getImageResponse = await searchBlank(regionLink);\n      if (!getImageResponse.ok) {\n        throw new Error('something went wrong!');\n      }\n      const regionImage = await getImageResponse.json();\n      // get the image link and store the string value in the cityData object \n      const imageLink = regionImage.photos[0].image.web;\n      cityData[0].['image'] = imageLink;\n\n      const regionName = cityData[0]._embedded[\"city:item\"]._embedded[\"city:urban_area\"].full_name;\n      cityData[0].['region'] = regionName;\n\n      // Update the hook and empty the search field\n      setSearchedCities(cityData);\n      setSearchedChart(cityData);\n      setSearchInput('');\n\n\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n  const handleSaveCity = async (cityId) => {\n\n    // find the city in `searchedcities` state by the matching id\n    const cityToSave = searchedCities.find((city) => city.cityId === cityId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    // save city\n    try {\n      console.log(cityToSave);\n      const cityData = {\n        name: cityToSave.matching_full_name,\n        healthcare: cityToSave.healthcare,\n        taxation: cityToSave.taxation,\n        education: cityToSave.education,\n        housing: cityToSave.housing,\n        costOfLiving: cityToSave.costOfLiving,\n        housing: cityToSave.housing,\n        safety: cityToSave.safety,\n        environmentalQuality:\n          cityToSave.environmentalQuality,\n        economy: cityToSave.economy,\n        image: cityToSave.image,\n        region: cityToSave.region,\n        population: cityToSave.population\n\n\n\n\n      }\n      const response = await saveCity({\n        variables: { city: cityData },\n      });\n\n      if (!response.data) {\n        throw new Error('something went wrong!');\n      }\n\n      setSavedCityIds([...savedCityIds, cityToSave.cityId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-info p-5 search'>\n        <Container className='p-5'>\n          <h1>Search for your future home city</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Form.Label>City, State </Form.Label>\n              <Form.Control\n                name='searchInput'\n                value={searchInput}\n                onChange={(e) => setSearchInput(e.target.value)}\n                type='text'\n                placeholder='Example: New York, NY'\n              />\n              <Button type='submit'>\n                Search\n              </Button>\n            </Form.Row></Form>\n        </Container>\n      </Jumbotron>\n      <Container className='p-5'>\n        {searchedCities.map(city => <div key={city.matching_full_name}>\n         <div className=\"city-container\">\n          <div>\n            <h2>\n              {city.matching_full_name} \n            </h2>\n            <h3>\n              <span className=\"bold\">Population: </span><span>{city.population}</span>\n            </h3>\n            <div>\n              <span className=\"bold\">Region: </span><span>{city.region}</span>\n            </div>\n            <div>\n              <span className=\"bold\">Healthcare: </span><span>{city.healthcare} of 10</span>\n            </div>\n            <div>\n              <span className=\"bold\">Taxation: </span><span>{city.taxation} of 10</span>\n            </div>\n            <div>\n              <span className=\"bold\">Education: </span><span>{city.education} of 10</span>\n            </div>\n            <div>\n              <span className=\"bold\">Housing: </span><span>{city.housing} of 10</span>\n            </div>\n            <div>\n              <span className=\"bold\">Cost of Living: </span><span>{city.costOfLiving} of 10</span>\n            </div>\n            <div>\n              <span className=\"bold\">Safety: </span><span>{city.safety} of 10</span>\n            </div>\n            <div>\n              <span className=\"bold\">Environmental Quality: </span><span>{city.environmentalQuality} of 10</span>\n            </div>\n            <div>\n              <span className=\"bold\">Economy: </span><span>{city.economy} of 10</span>\n            </div>\n          </div>\n          <div className=\"image-cropper\">\n            <img alt=\"city\" className=\"city-pic\" src={city.image}></img>\n          </div>\n          </div>\n          <Container className='p-5'>\n            <div>\n              <Bar\n                data={{\n                  labels: ['Healthcare', 'Taxation', 'Education', 'Housing', 'Living', 'Safety', 'Environment', 'Economy'],\n                  datasets: [\n                    {\n                      label: 'Score',\n                      data: [`${city.healthcare}`, `${city.taxation}`, `${city.education}`, `${city.housing}`, `${city.costOfLiving}`, `${city.safety}`, `${city.environmentalQuality}`, `${city.economy}`],\n\n                      backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)'\n                      ],\n                      borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)'\n                      ],\n                      borderWidth: 1\n                    }]\n\n                }}\n                height={400}\n                width={500}\n                options={{\n                  maintainAspectRatio: false,\n                  scales: {\n                    y: {\n                      suggestedMin: 0,\n                      suggestedMax: 10\n                    }\n                  }\n                }}\n              />\n            </div>\n            <Button\n              disabled={savedCityIds?.some((savedCityId) => savedCityId === city.cityId)}\n              className='btn-block btn-info'\n              onClick={() => handleSaveCity(city.cityId)}>\n              {savedCityIds?.some((savedCityId) => savedCityId === city.cityId)\n                ? 'This city has already been saved!'\n                : 'Save this City!'}\n            </Button>\n\n          </Container>\n        </div>)}\n\n      </Container>\n\n\n    </>\n  );\n};\n\nexport default Search;","export const getSavedCityIds = () => {\n  const savedCityIds = localStorage.getItem('saved_cities')\n    ? JSON.parse(localStorage.getItem('saved_cities'))\n    : [];\n\n  return savedCityIds;\n};\n\nexport const saveCityIds = (cityIdArr) => {\n  if (cityIdArr.length) {\n    localStorage.setItem('saved_cities', JSON.stringify(cityIdArr));\n  } else {\n    localStorage.removeItem('saved_cities');\n  }\n};\n\nexport const removeCityId = (cityId) => {\n  const savedCityIds = localStorage.getItem('saved_cities')\n    ? JSON.parse(localStorage.getItem('saved_cities'))\n    : null;\n\n  if (!savedCityIds) {\n    return false;\n  }\n\n  const updatedSavedCityIds = savedCityIds?.filter((savedCityId) => savedCityId !== cityId);\n  localStorage.setItem('saved_cities', JSON.stringify(updatedSavedCityIds));\n\n  return true;\n};\n","export const searchCityData = (query) => {\n  return fetch(`https://api.teleport.org/api/cities/?search=${query}&limit=1&embed=city%3Asearch-results%2Fcity%3Aitem%2Fcity%3Aurban_area%2Fua%3Ascores`);\n};\n\nexport const searchBlank = (link) => {\n  return fetch(`${link}`);\n};","export const numbersWithCommas = (num) => {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}","import { gql } from '@apollo/client';\n\n// define query\nexport const QUERY_ME = gql`\n  query me {\n    me {\n      _id\n      username\n      email\n      cityCount\n      savedCities {\n        cityId\n        name\n        image\n        healthcare\n        taxation\n        education\n        housing\n        costOfLiving\n        safety\n        environmentalQuality\n        economy\n        population\n        region\n      }\n    }\n  }\n`;","import React from 'react'\nimport { Bar } from 'react-chartjs-2'\nimport { Container } from 'react-bootstrap'\nimport Search from '../pages/Search';\n\nconst BarChart = () => {\n\n    return (\n        <Container className='p-5'>\n\n            <Bar\n                data={{\n                    labels: ['Healthcare', 'Taxation', 'Education', 'Housing', 'Living', 'Safety', 'Environment', 'Economy'],\n                    datasets: [\n                        {\n                            label: 'Score',\n                            data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n\n                            backgroundColor: [\n                                'rgba(255, 99, 132, 0.2)',\n                                'rgba(54, 162, 235, 0.2)',\n                                'rgba(255, 206, 86, 0.2)',\n                                'rgba(75, 192, 192, 0.2)',\n                                'rgba(153, 102, 255, 0.2)',\n                                'rgba(255, 159, 64, 0.2)'\n                            ],\n                            borderColor: [\n                                'rgba(255, 99, 132, 1)',\n                                'rgba(54, 162, 235, 1)',\n                                'rgba(255, 206, 86, 1)',\n                                'rgba(75, 192, 192, 1)',\n                                'rgba(153, 102, 255, 1)',\n                                'rgba(255, 159, 64, 1)'\n                            ],\n                            borderWidth: 1\n                        }]\n\n                }}\n                height={300}\n                width={350}\n                options={{\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            suggestedMin: 0,\n                            suggestedMax: 10\n                        }\n                    }\n                }}\n            />\n\n        </Container>\n\n    )\n}\n\n\nexport default BarChart","import React from 'react'\nimport { Container, Table, Col, Row } from 'react-bootstrap'\nimport { Dropdown } from 'semantic-ui-react'\n\nconst cityTable = () => {\n    \n    \n    return (\n        <Container>\n            <Row className=\"p-3\">\n\n                <Col>         \n                  <Dropdown\n        fluid\n        multiple\n    \n        placeholder='State'\n        search\n       \n        selection\n    \n      />\n                </Col>\n                \n            </Row>\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>First Name</th>\n\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>Mark</td>\n                    </tr>\n                    <tr>\n                        <td>Jacob</td>\n                    </tr>\n                    <tr>\n                        <td>3</td>\n                    </tr>\n                </tbody>\n            </Table>\n\n\n\n\n\n\n        </Container>\n\n    )\n}\n\n\nexport default cityTable","import React from 'react';\nimport { Jumbotron, Container, Button, Col, Row, Card, ListGroup, Nav, Sonnet, Tab } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_CITY } from '../utils/mutations';\nimport { removeCityId } from '../utils/localStorage';\nimport Auth from '../utils/auth';\nimport BarChart from '../components/BarChart';\nimport CityTable from '../components/Table';\n\n\n\n\n\n\nconst Profile = () => {\n\n\n    const { loading, data } = useQuery(QUERY_ME);\n    console.log(data);\n\n    const userData = data?.me || {};\n    console.log(userData);\n\n\n    const [removeCity] = useMutation(REMOVE_CITY);\n\n\n    // create function that accepts the city's mongo _id value as param and deletes the book from the database\n    const handleDeleteCity = async (cityId) => {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n            return false;\n        }\n\n        // remove city\n        try {\n            const response = await removeCity({\n                variables: { cityId },\n            });\n\n            if (!response.data) {\n                throw new Error('something went wrong!');\n            }\n            // upon success, remove city's id from localStorage\n            removeCityId(cityId);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n    // if data isn't here yet, say so\n    if (loading) {\n        return <h2>LOADING...</h2>;\n    }\n\n    return (\n        <>\n            <Jumbotron fluid className=\"m-3\">\n                <Row>\n                    <Col className=\"mh-100\" xs={5}>\n                        <Card className=\"p-4 \">\n\n                            <Card.Body>\n                                <Card.Title>Card Title</Card.Title>\n                                <Card.Subtitle className=\"mb-2 text-muted\">Card Subtitle</Card.Subtitle>\n                                <Card.Text>\n                                    Some quick example text to build on the card title and make up the bulk of\n                                    the card's content.\n                                </Card.Text>\n                                <Card.Link href=\"#\">Card Link</Card.Link>\n                                <Card.Link href=\"#\">Another Link</Card.Link>\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item>Cras justo odio</ListGroup.Item>\n                                    <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n                                    <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\n                                </ListGroup>\n                            </Card.Body>\n                        </Card>\n                        <Card className=\"bg-dark text-white\" style={{ height: '18rem' }}>\n                            <Card.Img src=\"holder.js/100px270\" alt=\"Card image\" />\n                            <Card.ImgOverlay>\n                                <Card.Title>Card title</Card.Title>\n                                <Card.Text>\n                                    This is a wider card with supporting text below as a natural lead-in to\n                                    additional content. This content is a little bit longer.\n                                </Card.Text>\n                                <Card.Text>Last updated 3 mins ago</Card.Text>\n                            </Card.ImgOverlay>\n                        </Card>\n\n                    </Col>\n                    <Col className=\"d-flex\">\n                        <Col className=\"d-flex\" >\n\n                            <Container>\n\n                                <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n                                    <Row>\n                                        <Col sm={3}>\n                                            <Nav variant=\"pills\" className=\"flex-column\" >\n                                                <Nav.Item >\n                                                    <Nav.Link className=\"pt-2 pb-2\" eventKey=\"first\"> Saved City 1</Nav.Link>\n                                                </Nav.Item>\n                                                <Nav.Item>\n                                                    <Nav.Link className=\"pt-2 pb-2\" eventKey=\"second\">Saved City 2</Nav.Link>\n                                                </Nav.Item>\n                                                <Nav.Item>\n                                                    <Nav.Link className=\"pt-2 pb-2\" eventKey=\"third\">Saved City 3</Nav.Link>\n                                                </Nav.Item>\n                                            </Nav>\n                                        </Col>\n                                        <Col sm={9}>\n                                            <Tab.Content>\n                                                <Tab.Pane eventKey=\"first\">\n                                                    <BarChart />\n                                                </Tab.Pane>\n                                                <Tab.Pane eventKey=\"second\">\n                                                    <BarChart />\n                                                </Tab.Pane>\n                                                <Tab.Pane eventKey=\"third\">\n                                                    <BarChart />\n                                                </Tab.Pane>\n                                            </Tab.Content>\n                                        </Col>\n                                    </Row>\n                                </Tab.Container>\n                                <h4> Compare City Costs </h4>\n                                <CityTable />\n\n\n                            </Container>\n                        </Col>\n                        {/* <Col className=\"d-flex\"> <BarChart /></Col> */}\n\n                        <Row className=\"g-2\">\n                            <Col md>\n\n\n\n                            </Col>\n\n                        </Row>\n                    </Col>\n                </Row>\n\n            </Jumbotron>\n\n\n\n        </>\n    );\n};\n\nexport default Profile;","import React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n\nimport NavBar from './components/NavBar';\nimport Search from './pages/Search';\nimport Profile from './pages/Profile';\n\n// create main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// create request middleware\nconst authLink = setContext((_, { headers }) => {\n\n  // get the token from local storage \n  const token = localStorage.getItem('id_token');\n\n  // return the headers to the context\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\n// create Apollo client\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <NavBar />\n          <Switch>\n            <Route exact path='/' component={Search} />\n            <Route exact path='/profile' component={Profile} />\n\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}